local meta = FindMetaTable("Player");function meta:IsUC()	return (self == GetUC());endfunction meta:IsTaunting()	return (self:GetNWBool("UC_Taunting"));endfunction meta:CanTaunt()	return (self:Alive() && self:Team() == TEAM_PIGS && !self:IsTaunting() && !self:IsScared() && !self:GetSprinting() && self:IsOnGround());endfunction meta:MovementKeyDown()	return (self:KeyDown(IN_FORWARD) || self:KeyDown(IN_BACK) || self:KeyDown(IN_MOVELEFT) || self:KeyDown(IN_MOVERIGHT));endmeta.Alive = function(ply)	return (!ply:GetNWBool("UCDead", true));endfunction meta:UCHGetUserGroup()		if (ULib && GetGlobalBool("ULXMode")) then		if (ULib.ucl.authed[self:UniqueID()].group) then return self:GetUserGroup() end --ULX		if (self.EV_GetRank) then return self:EV_GetRank() end --Evolve				-- add for each conflicting admin mod.				return self:GetNWString("UserGroup")	else		return self:GetRank()	end	endif (SERVER) then			function meta:SetDead(b)				self:SetNWBool("UCDead", b);			end			//LETS OVERRIDE SOME KILL FUNCTION YEAAAAA	meta.Kill = function(ply) //yea woo				if (!ply:Alive()) then			return;		end				if (ply:FlashlightIsOn()) then			ply:Flashlight();		end				if (ply:IsUC()) then			ply:CreateBirdProp();			ply:CreateRagdoll();		else						if (ply.Squished || ply.Bit) then								if (team.AlivePlayers(ply:Team()) > 0) then					AddTime(20);				end								if (ply.Squished) then					local r, g, b = ply:GetRankColor();					local effectdata = EffectData();						effectdata:SetOrigin(ply:GetPos());						effectdata:SetStart(Vector(r, g, b));					util.Effect("pop", effectdata);					ply:SetPancake(false);				else					ply:CreateRagdoll();				end							else				ply:CreateRagdoll();			end					end				DoKillNotice(ply);		hook.Call("DoPlayerDeath", GAMEMODE, ply);				if (ply:IsUC()) then			if (ply.Pressed && ply.Presser:IsValid()) then				hook.Call("PlayerDeath", GAMEMODE, ply, nil, ply.Presser);			else				hook.Call("PlayerDeath", GAMEMODE, ply, nil, nil);			end		else			if (ply.Squished or ply.Bit) then				hook.Call("PlayerDeath", GAMEMODE, ply, nil, GetUC());				return;			end								hook.Call("PlayerDeath", GAMEMODE, ply, nil, nil);		end			end			function meta:SetupVariables()				self:SetNWBool("UC_Voted", false);				self.PlaybackRate = 1;		self.NextRank = 1;		self.LastUC = false;			end			function meta:SetupSpeeds()				local spd, cspd = 175, .3;		local state = GetState();				if (self:IsUC() && (state == STATE_PLAYING || state == STATE_INTERMISSION)) then						spd = 112;			cspd = 1;					end				if (self:IsGhost()) then			spd, cspd = 250, 1;		end				self:SetSpeed(spd);		self:SetCrouchedWalkSpeed(cspd);			end			function meta:UpdateSpeeds()				if (!Playing()) then			self:SetupSpeeds();		end				if (self:GetSprinting() || self:IsScared()) then						local spd, cspd = 375, .5;									if (self:IsScared()) then				spd = 242;				cspd = .5;			end						if (self:IsUC()) then								spd = 300;							end						self:SetSpeed(spd);			self:SetCrouchedWalkSpeed(cspd);					else						self:ResetSpeeds();					end				if (self:GetNWBool("Swiped") && self:Alive()) then			self:SetSpeed(.0001);		end			end			function meta:SetSpeed(spd)		self:SetWalkSpeed(spd);		self:SetRunSpeed(spd);	end			function meta:ResetSpeeds()		self:SetupSpeeds();	end			function meta:SetRankBodygroups()				local rank = self:GetRankNum();		if (rank > 3) then			self:SetBodygroup(2, 1);			self:SetBodygroup(1, 0);		else			self:SetBodygroup(2, 0);			self:SetBodygroup(1, (rank - 1));		end			end			function meta:SetRankSkin()				local rank = self:GetRankNum();		self:SetSkin((rank - 1));			end			function meta:MakePiggyNoises()		self.LastSnort = (self.LastSnort || (CurTime() + math.random(9, 14)));		if (CurTime() >= self.LastSnort) then						self:EmitSound("uch/pigs/snort_" .. tostring(math.random(1, 4)) .. ".mp3", 75, math.random(90, 105));						local num = math.Rand(6, 9);						if (self:IsScared() || !self:CanSprint()) then				num = (num * .25);			end						self.LastSnort = (CurTime() + num);					end	end			function meta:CreateUCHRagdoll(b)				if (self:IsGhost()) then			return;		end				if (self.Ragdoll:IsValid()) then			self.Ragdoll:Remove();		end				local rag = ents.Create("prop_ragdoll");		rag:SetModel(self:GetModel());		rag:SetPos((self:GetPos() + Vector(0, 0, 24)));		rag:SetAngles(self:GetAngles());		rag:Spawn();		if (!rag:IsValid()) then			return;		end		rag:SetCollisionGroup(COLLISION_GROUP_DEBRIS);		local entvel;		local entphys = self:GetPhysicsObject();		if (entphys:IsValid()) then			entvel = entphys:GetVelocity();		else			entvel = self:GetVelocity();		end		if (b) then			rag:EmitSound("uch/pigs/squeal_" .. tostring(math.random(1, 3)) .. ".mp3", 82, math.random(94, 105));		end		for i = 1, rag:GetPhysicsObjectCount() do			local bone = rag:GetPhysicsObjectNum(i);			if (bone:IsValid()) then				local bonepos, boneang = self:GetBonePosition(rag:TranslatePhysBoneToBone(i));				bone:SetPos(bonepos);				bone:SetAngle(boneang);								if (b && GAMEMODE:GetUC():IsValid()) then										local fwd = GAMEMODE:GetUC():GetForward();					fwd.z = 0;					fwd:Normalize();										entvel = (entvel + (fwd * 3200) + Vector(0, 0, 1600));									end								bone:ApplyForceOffset(self:GetVelocity(), self:GetPos());				bone:AddVelocity(entvel);							end		end				rag:SetSkin(self:GetSkin());		rag:SetColor(self:GetColor());		rag:SetMaterial(self:GetMaterial());				for i = 1, 2 do			rag:SetBodygroup(i, self:GetBodygroup(i));		end		self.Ragdoll = rag;				rag.CollideVar = true;				timer.Simple(32, function()			if (rag:IsValid() && rag != GAMEMODE.UCRagdoll) then				rag:Remove();			end		end);				return rag;			end			function meta:StopTaunting()		self:SetNWBool("UC_Taunting", false);	end			function meta:Taunt(t, playback)				self:SetNWBool("UC_Taunting", true);				self:SetCycle(0);				local seq = self:LookupSequence(t);		self:ResetSequence(seq);				self:PlaybackRateOV(playback);				RestartAnimation(self);				timer.Simple((self:SequenceDuration() * (.98 / self:GetNWInt("PlaybackRate", 1))), function()			if (self:IsValid()) then								self:StopTaunting();				self:PlaybackReset();							end		end);				self:EmitSound("uch/pigs/salute.mp3", 82, math.random(90, 105));			end			function meta:PlaySpawnSound()				local rank = self:GetRank();				if (self:IsUC() || self:Team() == TEAM_SPECTATE) then			rank = "chimera";		end				self:SendLua("surface.PlaySound(\"uch/music/cues/spawn_" .. rank:lower() .. ".mp3\")");			end		else			function meta:CreateRagdoll(b, ply)				local rag = ents.Create("hl2mp_ragdoll");		rag:SetModel(self:GetModel());		rag:SetPos(self:GetPos());		rag:SetAngles(self:GetAngles());		rag:Spawn();		if (!rag:IsValid()) then			return;		end		rag:SetCollisionGroup(COLLISION_GROUP_DEBRIS);		local entvel;		local entphys = self:GetPhysicsObject();		if (entphys:IsValid()) then			entvel = entphys:GetVelocity();		else			entvel = self:GetVelocity();		end		for i = 1, rag:GetPhysicsObjectCount() do			local bone = rag:GetPhysicsObjectNum(i);			if (bone:IsValid()) then				local bonepos, boneang = self:GetBonePosition(rag:TranslatePhysBoneToBone(i));				bone:SetPos(bonepos);				bone:SetAngle(boneang);								if (b) then										local fwd = ply:GetForward();					fwd.z = 0;					fwd:Normalize();										entvel = (entvel + (fwd * 3200));									end								bone:ApplyForceOffset(self:GetVelocity(), self:GetPos());				bone:AddVelocity(entvel);							end		end		rag:SetSkin(self:GetSkin());		rag:SetColor(self:GetColor());		rag:SetMaterial(self:GetMaterial());				for i = 1, 2 do			rag:SetBodygroup(i, self:GetBodygroup(i));		end				return rag;			end		end